
import re
import argparse

# Because the Web is terrible, this
# is the most practical way to do nice typography without scss.
# Eventually min / max will arrive, and this monstrosity will
# become happily irrelevant.

css_template_raw = r'''
/*
START GENERATED
This awfulness was generated by a script.
It's a 'CSS Lock' that provides the obvious sensible
thing that you want, namely max; min and smooth interpolation between.
Original idea is due to:
https://www.madebymike.com.au/writing/precise-control-responsive-typography/
Static generated version is due to:
https://gist.github.com/N-McA/2a0831b3709fb4336aa32f25a850d769
*/
.#{$class_name} { font-size: #{$min_font}rem; }
@media (min-width: #{$min_width}px) and (max-width: #{$max_width}px){
  .#{$class_name} {
    font-size: calc( #{$min_font}rem + (#{$max_font} - #{$min_font}) * ( (100vw - #{$min_width}px) / ( #{$max_width} - #{$min_width}) ));
  }
}
@media (min-width: #{$max_width}px){
  .#{$class_name} {
    font-size: #{$max_font}rem;
  }
}
/* END GENERATED */
'''

def css_lock(**kwargs):

    css_template = \
      re.sub(r'#{\$(.*?)}', lambda m: '[' + m.group(1) + ']', css_template_raw)

    # Escape the {'s to {{'s so they render as {'s
    # Replace the ['s that we used as placeholders with {'s
    css_template = (
            css_template
            .replace('{', '{{')
            .replace('}', '}}')
            .replace('[', '{')
            .replace(']', '}')
    )

    print(css_template.format(**kwargs))

    
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--class-name', default='medium-font')
    parser.add_argument('--min-font', default=1)
    parser.add_argument('--max-font', default=2)    
    parser.add_argument('--min-width', default=400)    
    parser.add_argument('--max-width', default=800)
    return parser.parse_args()
    

if __name__ == '__main__':
    args = parse_args()
    css_lock(**args.__dict__)
